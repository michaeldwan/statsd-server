#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'rubygems'
require 'yaml'
require 'erb'
require 'optparse'

require 'statsd_server/version'
begin
  ORIGINAL_ARGV = ARGV.dup
  
  options = {:redis => false, :debug => false, :workers => 1, port: 8125}
  
  parser = OptionParser.new do |opts|
    opts.banner = "Usage: statsd [options]"

    opts.separator ""
    opts.separator "options:"

    opts.on("-cCONFIG", "--config-file CONFIG", "Configuration file") do |x|
     options[:config] = x 
    end
    
    opts.on("-r", "--redis", "Flush stats to Redis") do 
     options[:redis] = true
    end
    
    opts.on("-l", "--librato", "Flush stats to Librato Metrics") do 
     options[:librato] = true
    end

    opts.on("-is", "--info-server", "Run an information server") do 
     options[:info_server] = true
    end

    opts.on("-pPORT", "--port PORT", "Port") do |value|
     options[:port] = value.to_i
    end

    opts.on("-ds", "--disk-store", "Flush stats to Disk") do 
     options[:disk] = true
    end

    opts.on("-v", "--version", "Show version") do
      puts StatsdServer::VERSION
      exit
    end

    opts.on("-d", "--debug", "Debug mode") do
      options[:debug] = true
    end

    opts.on("-h", "--help", "Show this message") do
      puts opts
      exit
    end

  end

  parser.parse!

  config = YAML::load(ERB.new(IO.read(options[:config])).result)

  # dispatch
  if !options[:config] 
    puts parser.help
  else
    require 'statsd_server'
    require 'statsd_server/server'
    @workers = []
    options[:workers].times do 
      @workers << fork do 
        StatsdServer::Queue.work!(options)
      end
    end
    StatsdServer::Server::Daemon.new.run(options)
  end
rescue Exception => e
  if @workers
    @workers.each do |worker|
      Process.kill("SIGKILL", worker)
    end
  end
  if e.instance_of?(SystemExit)
    raise
  else
    puts 'Uncaught exception'
    puts e.message
    puts e.backtrace.join("\n")
  end
end
